package main

import (
	"bytes"
	"go/format"
	"io/ioutil"
	"path/filepath"
	"strconv"
	"strings"
	"text/template"
)

var schemaValueTmpl = template.Must(template.New("value").Funcs(map[string]interface{}{
	"quote":      strconv.Quote,
	"capitalize": capitalize,
}).Parse(`// Code generated by gen/schema_value.go. DO NOT EDIT.

package proto

// Schema.Value union type from https://github.com/capnproto/capnproto/blob/master/c++/src/capnp/schema.capnp
// Version info: {{ .Version }}
type Value map[string]interface{}

func (v Value) Which() ValueType {
{{ range $idx, $pair := .Types }}
	{{- if gt $idx 0 }} else {{ end -}}
	if _, ok := v[{{ index $pair 0 | quote }}]; ok {
		return Value{{ index $pair 0 | capitalize }}
	}
{{- end -}}
	else {
		return ValueUnknown
	}
}

type ValueType uint16

const (
{{- range $idx, $pair := .Types }}
	Value{{ index $pair 0 | capitalize }}{{ if eq $idx 0 }} ValueType = iota{{ end }}
{{- end }}
	ValueUnknown
)


func (t ValueType) String() string {
	switch t {
{{- range .Types }}
	case Value{{ index . 0 | capitalize }}:
		return {{ index . 0 | quote }}
{{- end }}
	default:
		return ""
	}
}


`))

// generates proto_value.gen.go
func generateSchemaValue() {
	// TODO: use value type(valueTypes[x][1]) to generate value getter functions
	valueTypes := [][]string{
		{"void", "struct{}"},
		{"bool", "bool"},
		{"int8", "int8"},
		{"int16", "int16"},
		{"int32", "int32"},
		{"int64", "int64"},
		{"uint8", "uint8"},
		{"uint16", "uint16"},
		{"uint32", "uint32"},
		{"uint64", "uint64"},
		{"float32", "float32"},
		{"float64", "float64"},
		{"text", "string"},
		{"data", "string"},
		{"list", "interface{}"},
		{"enum", "uint16"},
		{"struct", "interface{}"},
		{"interface", "interface{}"},
		{"anyPointer", "interface{}"},
	}

	params := struct{
		Version string
		Types [][]string
	}{
		capnpVersion,
		valueTypes,
	}

	buf := bytes.NewBuffer(nil)
	err := schemaValueTmpl.Execute(buf, params)
	dieOnErr(err)
	formatted, err := format.Source(buf.Bytes())
	dieOnErr(err)
	err = ioutil.WriteFile(filepath.Join("schema", "proto", "proto_value.gen.go"), formatted, 0644)
	dieOnErr(err)
}

func capitalize(s string) string {
	if len(s) == 0 {
		return ""
	}
	return strings.ToUpper(s[:1]) + s[1:]
}
