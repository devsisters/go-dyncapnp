package main

import (
	"bytes"
	"go/format"
	"io/ioutil"
	"path/filepath"
	"strconv"
	"text/template"
)

var outputTmpl = template.Must(template.New("imports").Parse(`// Code generated by gen/imports.go. DO NOT EDIT.

package dyncapnp

// Import files collected from https://github.com/capnproto/capnproto
// Version info: {{ .Version }}
var stdImports = map[string][]byte{
{{- range $path, $content := .Files }}
	{{ $path }}: []byte({{ $content }}),
{{- end }}
}
`))

// generates imports.gen.go
func generateImports() {
	params := struct {
		Version string
		Files   map[string]string
	}{
		capnpVersion,
		readCapnpFiles(),
	}

	buf := bytes.NewBuffer(nil)
	err := outputTmpl.Execute(buf, params)
	dieOnErr(err)
	formatted, err := format.Source(buf.Bytes())
	dieOnErr(err)
	err = ioutil.WriteFile("imports.gen.go", formatted, 0644)
	dieOnErr(err)
}


func readCapnpFiles() map[string]string {
	baseDir := filepath.Join("capnproto", "c++", "src")
	files, err := filepath.Glob(filepath.Join(baseDir, "**", "*.capnp"))
	dieOnErr(err)

	pathContentMap := make(map[string]string, len(files))
	for _, file := range files {
		p, err := filepath.Rel(baseDir, file)
		dieOnErr(err)

		b, err := ioutil.ReadFile(file)
		dieOnErr(err)

		pathContentMap[strconv.Quote(p)] = strconv.Quote(string(b))
	}
	return pathContentMap
}
